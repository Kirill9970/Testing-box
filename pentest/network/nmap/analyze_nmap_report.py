import sys
from pathlib import Path
from datetime import datetime
import xml.etree.ElementTree as ET

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Отчет nmap</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f8f9fa; }
        h1 { color: #2c3e50; }
        h2 { color: #1a5276; margin-top: 40px; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; background: #fff; }
        th, td { border: 1px solid #ccc; padding: 10px 16px; text-align: left; vertical-align: top; }
        th { background: #e9ecef; }
        .desc { margin-top: 30px; color: #555; }
        .block { background: #f4f4f4; border-radius: 4px; padding: 8px; font-family: monospace; white-space: pre-wrap; max-height: 300px; overflow: auto; }
    </style>
</head>
<body>
    <h1>Отчет по результатам сканирования nmap</h1>
    <div class="desc">
        <h2>Как читать этот отчет</h2>
        <ul>
            <li>Каждая секция — отдельный хост и его открытые порты.</li>
            <li>Описание, сервисы и версии помогут понять, что доступно на целевой машине.</li>
        </ul>
    </div>
    {findings}
</body>
</html>
'''

def parse_nmap_xml(path):
    tree = ET.parse(path)
    root = tree.getroot()
    findings = []
    for host in root.findall('host'):
        addr = host.find('address').attrib.get('addr', '-')
        ports = host.find('ports')
        if ports is None:
            continue
        for port in ports.findall('port'):
            portid = port.attrib.get('portid', '-')
            proto = port.attrib.get('protocol', '-')
            state = port.find('state').attrib.get('state', '-')
            service = port.find('service')
            svc_name = service.attrib.get('name', '-') if service is not None else '-'
            svc_ver = service.attrib.get('version', '-') if service is not None and 'version' in service.attrib else '-'
            findings.append({
                'host': addr,
                'port': portid,
                'proto': proto,
                'state': state,
                'service': svc_name,
                'version': svc_ver
            })
    return findings

def main():
    if len(sys.argv) < 2:
        print('Usage: python3 analyze_nmap_report.py <nmap_report.xml>')
        sys.exit(1)
    input_path = Path(sys.argv[1])
    dt_str = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_path = Path(__file__).resolve().parents[4] / 'reports' / 'pentest' / 'network' / 'nmap' / f'nmap_report_{dt_str}.html'
    findings = parse_nmap_xml(input_path)
    if not findings:
        html = HTML_TEMPLATE.format(findings='<h2>Нет найденных открытых портов или файл отчета пустой.</h2>')
    else:
        findings_html = '\n'.join([
            f'<h2>{i+1}. {f["host"]}:{f["port"]}/{f["proto"]}</h2>'
            f'<table>'
            f'<tr><th>Состояние</th><td>{f["state"]}</td></tr>'
            f'<tr><th>Сервис</th><td>{f["service"]}</td></tr>'
            f'<tr><th>Версия</th><td>{f["version"]}</td></tr>'
            f'</table>'
            for i, f in enumerate(findings)
        ])
        html = HTML_TEMPLATE.format(findings=findings_html)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html)
    print(f'HTML-отчет сгенерирован: {output_path}')

if __name__ == '__main__':
    main() 