import sys
import json
from pathlib import Path
from datetime import datetime

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Отчет Nuclei Pentest</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background: #f8f9fa; }}
        h1 {{ color: #2c3e50; }}
        h2 {{ color: #1a5276; margin-top: 40px; }}
        table {{ border-collapse: collapse; width: 100%; margin: 20px 0; background: #fff; }}
        th, td {{ border: 1px solid #ccc; padding: 10px 16px; text-align: left; vertical-align: top; }}
        th {{ background: #e9ecef; }}
        .severity-info {{ color: #2980b9; }}
        .severity-low {{ color: #27ae60; }}
        .severity-medium {{ color: #f39c12; }}
        .severity-high {{ color: #e67e22; }}
        .severity-critical {{ color: #c0392b; font-weight: bold; }}
        .desc {{ margin-top: 30px; color: #555; }}
        .block {{ background: #f4f4f4; border-radius: 4px; padding: 8px; font-family: monospace; white-space: pre-wrap; max-height: 300px; overflow: auto; }}
        .explain {{ color: #444; font-size: 1.05em; margin: 10px 0 20px 0; }}
        .matcher-name-row th {{ background: #d6eaf8; }}
        .matcher-name {{ font-weight: bold; color: #1a5276; }}
        .matcher-desc {{ color: #555; }}
    </style>
</head>
<body>
    <h1>Отчет по результатам сканирования nuclei</h1>
    <div class="desc">
        <h2>Как читать этот отчет</h2>
        <ul>
            <li>Каждая секция — отдельная найденная проблема или потенциальная уязвимость.</li>
            <li><b>Severity</b> — уровень критичности (info, low, medium, high, critical).</li>
            <li><b>Описание</b> и <b>пояснение</b> помогут понять, почему это важно и что делать.</li>
            <li>Для воспроизведения приведён curl-запрос и пример ответа сервера.</li>
            <li>Если severity = info — это не уязвимость, а просто интересная находка.</li>
        </ul>
    </div>
    {findings}
</body>
</html>
'''

SEVERITY_EXPLAIN = {
    "info": "Информационное сообщение — не уязвимость, но может помочь в анализе поверхности атаки.",
    "low": "Низкая критичность — маловероятно, что приведёт к серьёзным последствиям, но может быть использовано в цепочке атак.",
    "medium": "Средняя критичность — может привести к утечке информации или облегчить дальнейшие атаки.",
    "high": "Высокая критичность — может позволить атакующему получить доступ к данным или функционалу.",
    "critical": "Критическая уязвимость! Требует немедленного исправления, может привести к полному компрометированию системы."
}

def explain_finding(finding):
    sev = finding.get('info', {}).get('severity', 'info').lower()
    desc = finding.get('info', {}).get('description', '-')
    if sev == 'info':
        return desc + "\n" + SEVERITY_EXPLAIN[sev]
    return f"{desc}\n{SEVERITY_EXPLAIN.get(sev, '')}"

def render_finding(finding, idx):
    info = finding.get('info', {})
    severity = info.get('severity', 'info').lower()
    cwe = ', '.join(info.get('classification', {}).get('cwe-id', [])) or '-'
    cve = info.get('classification', {}).get('cve-id') or '-'
    cvss = info.get('classification', {}).get('cvss-metrics', '-')
    name = info.get('name', '-')
    description = info.get('description', '-')
    reference = ', '.join(info.get('reference', [])) or '-'
    tags = ', '.join(info.get('tags', [])) or '-'
    template_url = finding.get('template-url', '-')
    matched = finding.get('matched-at', finding.get('url', '-'))
    curl = finding.get('curl-command', '-')
    request = finding.get('request', '-')
    response = finding.get('response', '-')
    explain = explain_finding(finding)
    matcher_name = finding.get('matcher-name', '-')
    matcher_desc = description if matcher_name != '-' else '-'
    # Ограничим вывод ответа сервера первыми 15 строками
    response_short = '\n'.join(response.splitlines()[:15]) + ('\n...\n' if len(response.splitlines()) > 15 else '')
    return f'''
    <h2>{idx+1}. {name}</h2>
    <table>
        <tr><th>Severity</th><td class="severity-{severity}">{severity}</td></tr>
        <tr><th>Описание</th><td>{description}</td></tr>
        <tr><th>Пояснение</th><td class="explain">{explain}</td></tr>
        <tr class="matcher-name-row"><th>Matcher-name</th><td><span class="matcher-name">{matcher_name}</span><br><span class="matcher-desc">{matcher_desc}</span></td></tr>
        <tr><th>CWE</th><td>{cwe}</td></tr>
        <tr><th>CVE</th><td>{cve}</td></tr>
        <tr><th>CVSS</th><td>{cvss}</td></tr>
        <tr><th>Теги</th><td>{tags}</td></tr>
        <tr><th>Ссылка на шаблон</th><td><a href="{template_url}" target="_blank">{template_url}</a></td></tr>
        <tr><th>Matched URL</th><td>{matched}</td></tr>
        <tr><th>Reference</th><td>{reference}</td></tr>
        <tr><th>curl для воспроизведения</th><td><div class="block">{curl}</div></td></tr>
        <tr><th>Пример запроса</th><td><div class="block">{request}</div></td></tr>
        <tr><th>Пример ответа (первые 15 строк)</th><td><div class="block">{response_short}</div></td></tr>
    </table>
    '''

def main():
    if len(sys.argv) < 2:
        print('Usage: python3 analyze_nuclei_report.py <nuclei_report.jsonl>')
        sys.exit(1)
    input_path = Path(sys.argv[1])
    dt_str = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_path = Path(__file__).resolve().parents[3] / 'reports' / 'pentest' / 'nuclei' / f'nuclei_report_{dt_str}.html'
    findings = []
    with open(input_path, encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            try:
                finding = json.loads(line)
                findings.append(finding)
            except Exception as e:
                continue
    if not findings:
        html = HTML_TEMPLATE.format(findings='<h2>Нет найденных проблем или файл отчета пустой.</h2>')
    else:
        findings_html = '\n'.join([render_finding(f, i) for i, f in enumerate(findings)])
        html = HTML_TEMPLATE.format(findings=findings_html)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html)
    print(f'HTML-отчет сгенерирован: {output_path}')

if __name__ == '__main__':
    main()
