import sys
import json
from pathlib import Path
from datetime import datetime

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Отчет sqlmap</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f8f9fa; }
        h1 { color: #2c3e50; }
        h2 { color: #1a5276; margin-top: 40px; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; background: #fff; }
        th, td { border: 1px solid #ccc; padding: 10px 16px; text-align: left; vertical-align: top; }
        th { background: #e9ecef; }
        .desc { margin-top: 30px; color: #555; }
        .block { background: #f4f4f4; border-radius: 4px; padding: 8px; font-family: monospace; white-space: pre-wrap; max-height: 300px; overflow: auto; }
    </style>
</head>
<body>
    <h1>Отчет по результатам сканирования sqlmap</h1>
    <div class="desc">
        <h2>Как читать этот отчет</h2>
        <ul>
            <li>Каждая секция — отдельная найденная уязвимость или инъекция.</li>
            <li>Описание, тип инъекции, параметр, payload и рекомендации помогут понять, почему это важно и что делать.</li>
        </ul>
    </div>
    {findings}
</body>
</html>
'''

def parse_sqlmap_json(path):
    with open(path, encoding='utf-8') as f:
        data = json.load(f)
    findings = []
    for target in data.get('results', []):
        for vuln in target.get('vulnerabilities', []):
            findings.append({
                'type': vuln.get('type', '-'),
                'parameter': vuln.get('parameter', '-'),
                'payload': vuln.get('payload', '-'),
                'dbms': vuln.get('dbms', '-'),
                'title': vuln.get('title', '-'),
                'details': vuln.get('details', '-'),
                'recommendation': vuln.get('recommendation', '-')
            })
    return findings

def main():
    if len(sys.argv) < 2:
        print('Usage: python3 analyze_sqlmap_report.py <sqlmap_report.json>')
        sys.exit(1)
    input_path = Path(sys.argv[1])
    dt_str = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_path = Path(__file__).resolve().parents[3] / 'reports' / 'pentest' / 'sqlmap' / f'sqlmap_report_{dt_str}.html'
    findings = parse_sqlmap_json(input_path)
    if not findings:
        html = HTML_TEMPLATE.format(findings='<h2>Нет найденных проблем или файл отчета пустой.</h2>')
    else:
        findings_html = '\n'.join([
            f'<h2>{i+1}. {f["title"]}</h2>'
            f'<table>'
            f'<tr><th>Тип инъекции</th><td>{f["type"]}</td></tr>'
            f'<tr><th>Параметр</th><td>{f["parameter"]}</td></tr>'
            f'<tr><th>Payload</th><td><div class="block">{f["payload"]}</div></td></tr>'
            f'<tr><th>DBMS</th><td>{f["dbms"]}</td></tr>'
            f'<tr><th>Детали</th><td>{f["details"]}</td></tr>'
            f'<tr><th>Рекомендации</th><td>{f["recommendation"]}</td></tr>'
            f'</table>'
            for i, f in enumerate(findings)
        ])
        html = HTML_TEMPLATE.format(findings=findings_html)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html)
    print(f'HTML-отчет сгенерирован: {output_path}')

if __name__ == '__main__':
    main() 